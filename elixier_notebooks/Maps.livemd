<!-- livebook:{"persist_outputs":true} -->

# The Go To Datastructure the MAP

## Maps in Elixir

In Elixir Maps are the Go-to key-value store. Unlike keyword lists, they allow keys of any type and are un-ordered. You can define a map with the `%{}` syntax:

```elixir
map = %{:foo => "bar", "hello" => :world}
```

<!-- livebook:{"output":true} -->

```
%{:foo => "bar", "hello" => :world}
```

```elixir
map[:foo]
```

<!-- livebook:{"output":true} -->

```
"bar"
```

```elixir
map["hello"]
```

<!-- livebook:{"output":true} -->

```
:world
```

As of Elixir 1.2, variables are allowed as map keys:

```elixir
key = "hello"
%{key => "world"}
```

<!-- livebook:{"output":true} -->

```
%{"hello" => "world"}
```

If a duplicate is added to a map, it will replace the former value:

```elixir
%{:foo => "bar", :foo => "hello world"}
```

<!-- livebook:{"output":true} -->

```
warning: key :foo will be overridden in map
  #cell:ydlln7yiremyforf:1

```

<!-- livebook:{"output":true} -->

```
%{foo: "hello world"}
```

As we can see from the output above, there is a special syntax for maps containing only atom keys:

```elixir
%{foo: "bar", hello: "world"}
```

<!-- livebook:{"output":true} -->

```
%{hello: "world", foo: "bar"}
```

```elixir
%{foo: "bar", hello: "world"} == %{:foo => "bar", :hello => "world"}
```

<!-- livebook:{"output":true} -->

```
true
```

In addition, there is a special syntax you can use with atom keys:

```elixir
map = %{foo: "bar", hello: "world"}
```

<!-- livebook:{"output":true} -->

```
%{hello: "world", foo: "bar"}
```

```elixir
map.hello
```

<!-- livebook:{"output":true} -->

```
"world"
```

Another interesting property of maps is that they provide their own syntax for updates (note: this creates a new map):

```elixir
map = %{foo: "bar", hello: "world"}
```

<!-- livebook:{"output":true} -->

```
%{hello: "world", foo: "bar"}
```

```elixir
%{map | foo: "baz"}
```

<!-- livebook:{"output":true} -->

```
%{hello: "world", foo: "baz"}
```

Note: this syntax only works for updating a key that already exists in the map! If the key does not exist, a `KeyError` will be raised.

<!-- livebook:{"break_markdown":true} -->

To create a new key, instead use `Map.put/3`

```elixir
map = %{hello: "world"}
```

<!-- livebook:{"output":true} -->

```
%{hello: "world"}
```

```elixir
%{map | foo: "baz"}
```

```elixir
Map.put(map, :foo, "baz")
```

<!-- livebook:{"output":true} -->

```
%{hello: "world", foo: "baz"}
```
