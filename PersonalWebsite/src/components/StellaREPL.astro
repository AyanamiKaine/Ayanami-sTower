---
const {
    id = "stellarepl",
    wasmPath = "/forth_interpreter_dotnet_wasm/_framework/dotnet.js",
    scriptPath = "/forth_interpreter_dotnet_wasm/stellalang-repl.js",
    initialCode = "",
} = Astro.props;
---

<div id={id} class="w-full max-w-4xl mx-auto">
    <div
        class="bg-gray-900 rounded-lg shadow-2xl overflow-hidden border border-gray-700"
    >
        <div
            class="bg-gray-800 px-4 py-2 border-b border-gray-700 flex items-center justify-between"
        >
            <div class="flex items-center gap-2">
                <div class="flex gap-1.5">
                    <div class="w-3 h-3 rounded-full bg-red-500"></div>
                    <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                    <div class="w-3 h-3 rounded-full bg-green-500"></div>
                </div>
                <span class="text-gray-300 font-semibold text-sm ml-2"
                    >Stella REPL 0.1</span
                >
            </div>
            <button
                id={`${id}-clear`}
                class="text-gray-400 hover:text-gray-200 text-xs px-2 py-1 rounded hover:bg-gray-700 transition"
            >
                Clear
            </button>
        </div>
        <div
            id={`${id}-terminal`}
            class="bg-gray-950 p-4 font-mono text-sm h-96 overflow-y-auto"
        >
            <div id={`${id}-output`} class="text-green-400"></div>
            <div class="flex items-start mt-1">
                <span class="text-blue-400 mr-2 select-none">&gt;</span>
                <input
                    type="text"
                    id={`${id}-input`}
                    class="flex-1 bg-transparent text-gray-100 outline-none caret-green-400"
                    placeholder="Type code and press Enter..."
                    autocomplete="off"
                    spellcheck="false"
                    value={initialCode}
                />
            </div>
        </div>
    </div>
</div>

<script type="module" define:vars={{ id, scriptPath, wasmPath }}>
    // Dynamically load the REPL library and wire up the UI.
    async function init() {
        // Load the stellalang-repl.js module
        const mod = await import(scriptPath);
        const { StellaLangREPL } = mod;

        const outputEl = document.getElementById(`${id}-output`);
        const inputEl = document.getElementById(`${id}-input`);
        const terminalEl = document.getElementById(`${id}-terminal`);
        const commandHistory = [];
        let historyIndex = -1;

        const appendOutput = (text, className = "") => {
            const line = document.createElement("div");
            if (className) line.className = className;
            line.textContent = text;
            outputEl.appendChild(line);

            // Only auto-scroll if user is near the bottom (within 100px)
            const isNearBottom =
                terminalEl.scrollHeight -
                    terminalEl.scrollTop -
                    terminalEl.clientHeight <
                100;
            if (isNearBottom) {
                terminalEl.scrollTop = terminalEl.scrollHeight;
            }
        };

        const repl = new StellaLangREPL({
            wasmPath,
            onOutput: (text) => {
                appendOutput(text, "text-green-400");
            },
            onError: (err) => {
                appendOutput(
                    "Error: " + (err?.message || String(err)),
                    "text-red-400"
                );
            },
            onReady: (msg) => {
                appendOutput(`âœ“ ${msg}`, "text-cyan-400");
            },
        });

        try {
            await repl.initialize();
        } catch (e) {
            appendOutput("Initialization failed: " + e.message, "text-red-400");
        }

        const executeCommand = async () => {
            const code = inputEl.value.trim();
            if (!code) return;

            // Show the command in output
            appendOutput(`> ${code}`, "text-blue-400");

            // Add to history
            commandHistory.unshift(code);
            historyIndex = -1;

            try {
                // Just execute - output will be handled by onOutput/onError callbacks
                await repl.execute(code);
            } catch (err) {
                // Only log unexpected errors that weren't caught by onError
                console.error("Unexpected execution error:", err);
            }

            // Clear input
            inputEl.value = "";
        };

        // Handle Enter key
        inputEl.addEventListener("keydown", (e) => {
            if (e.key === "Enter") {
                e.preventDefault();
                executeCommand();
            } else if (e.key === "ArrowUp") {
                e.preventDefault();
                if (historyIndex < commandHistory.length - 1) {
                    historyIndex++;
                    inputEl.value = commandHistory[historyIndex];
                }
            } else if (e.key === "ArrowDown") {
                e.preventDefault();
                if (historyIndex > 0) {
                    historyIndex--;
                    inputEl.value = commandHistory[historyIndex];
                } else if (historyIndex === 0) {
                    historyIndex = -1;
                    inputEl.value = "";
                }
            }
        });

        // Clear button
        document.getElementById(`${id}-clear`).addEventListener("click", () => {
            outputEl.innerHTML = "";
            inputEl.value = "";
            inputEl.focus();
        });

        // Focus input on terminal click, but not when selecting text
        let mouseDownTarget = null;
        terminalEl.addEventListener("mousedown", (e) => {
            mouseDownTarget = e.target;
        });

        terminalEl.addEventListener("mouseup", (e) => {
            // Only focus if clicking in the same place (not dragging/selecting)
            // and there's no text selection
            const selection = window.getSelection();
            if (
                mouseDownTarget === e.target &&
                (!selection || selection.toString().length === 0)
            ) {
                inputEl.focus();
            }
        });

        // Auto-focus input
        inputEl.focus();
    }

    // Defer initialization to allow DOM to be ready
    setTimeout(() => {
        init().catch((e) => console.error(e));
    }, 0);
</script>
